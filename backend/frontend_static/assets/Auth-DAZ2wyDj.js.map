{"version":3,"file":"Auth-DAZ2wyDj.js","sources":["../../../src/pages/Auth.tsx"],"sourcesContent":["\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { signIn, signUp, getCurrentUser } from \"@/utils/supabase\";\n\nconst AuthPage = () => {\n  const navigate = useNavigate();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  \n  const [loginForm, setLoginForm] = useState({\n    email: '',\n    password: ''\n  });\n  \n  const [registerForm, setRegisterForm] = useState({\n    email: '',\n    password: '',\n    confirmPassword: ''\n  });\n  \n  useEffect(() => {\n    // Check if user is already logged in\n    const checkAuth = async () => {\n      const { data } = await getCurrentUser();\n      if (data.user) {\n        navigate('/');\n      }\n    };\n    \n    checkAuth();\n  }, [navigate]);\n\n  const handleLoginSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    \n    try {\n      const { data, error } = await signIn(loginForm.email, loginForm.password);\n      \n      if (error) {\n        toast({\n          title: \"Login Failed\",\n          description: error.message,\n          variant: \"destructive\"\n        });\n      } else if (data) {\n        toast({\n          title: \"Login Successful\",\n          description: \"Welcome back!\"\n        });\n        navigate('/');\n      }\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      toast({\n        title: \"Login Failed\",\n        description: \"An unexpected error occurred\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  const handleRegisterSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (registerForm.password !== registerForm.confirmPassword) {\n      toast({\n        title: \"Registration Failed\",\n        description: \"Passwords do not match\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    setIsLoading(true);\n    \n    try {\n      const { data, error } = await signUp(registerForm.email, registerForm.password);\n      \n      if (error) {\n        toast({\n          title: \"Registration Failed\",\n          description: error.message,\n          variant: \"destructive\"\n        });\n      } else {\n        toast({\n          title: \"Registration Successful\",\n          description: \"Check your email for a confirmation link to complete your registration.\"\n        });\n        \n        // In development, users might want to proceed without email confirmation\n        if (data?.user && !data.session) {\n          toast({\n            title: \"Note\",\n            description: \"For development, you might want to disable email confirmation in the Supabase dashboard.\"\n          });\n        }\n        \n        if (data?.session) {\n          navigate('/');\n        }\n      }\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      toast({\n        title: \"Registration Failed\",\n        description: \"An unexpected error occurred\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-b from-gray-50 to-gray-100 py-12 px-4 sm:px-6 lg:px-8\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-3xl font-bold\">Welcome</CardTitle>\n          <CardDescription>Sign in or create an account to save your website configurations</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Tabs defaultValue=\"login\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2 mb-8\">\n              <TabsTrigger value=\"login\">Login</TabsTrigger>\n              <TabsTrigger value=\"register\">Register</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"login\">\n              <form onSubmit={handleLoginSubmit} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"login-email\">Email</Label>\n                  <Input \n                    id=\"login-email\" \n                    type=\"email\" \n                    placeholder=\"your@email.com\" \n                    value={loginForm.email}\n                    onChange={(e) => setLoginForm({...loginForm, email: e.target.value})}\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"login-password\">Password</Label>\n                  <Input \n                    id=\"login-password\" \n                    type=\"password\" \n                    value={loginForm.password}\n                    onChange={(e) => setLoginForm({...loginForm, password: e.target.value})}\n                    required\n                  />\n                </div>\n                <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                  {isLoading ? \"Signing in...\" : \"Sign In\"}\n                </Button>\n              </form>\n            </TabsContent>\n            \n            <TabsContent value=\"register\">\n              <form onSubmit={handleRegisterSubmit} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"register-email\">Email</Label>\n                  <Input \n                    id=\"register-email\" \n                    type=\"email\" \n                    placeholder=\"your@email.com\" \n                    value={registerForm.email}\n                    onChange={(e) => setRegisterForm({...registerForm, email: e.target.value})}\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"register-password\">Password</Label>\n                  <Input \n                    id=\"register-password\" \n                    type=\"password\" \n                    value={registerForm.password}\n                    onChange={(e) => setRegisterForm({...registerForm, password: e.target.value})}\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"register-confirm-password\">Confirm Password</Label>\n                  <Input \n                    id=\"register-confirm-password\" \n                    type=\"password\" \n                    value={registerForm.confirmPassword}\n                    onChange={(e) => setRegisterForm({...registerForm, confirmPassword: e.target.value})}\n                    required\n                  />\n                </div>\n                <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                  {isLoading ? \"Creating account...\" : \"Create Account\"}\n                </Button>\n              </form>\n            </TabsContent>\n          </Tabs>\n          \n          <div className=\"mt-6 text-center\">\n            <Button variant=\"outline\" onClick={() => navigate('/')} className=\"w-full\">\n              Back to Templates\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default AuthPage;\n"],"names":["AuthPage","navigate","useNavigate","toast","useToast","isLoading","setIsLoading","useState","loginForm","setLoginForm","registerForm","setRegisterForm","useEffect","data","getCurrentUser","handleLoginSubmit","e","error","signIn","handleRegisterSubmit","signUp","jsxs","Card","CardHeader","jsx","CardTitle","CardDescription","CardContent","Tabs","TabsList","TabsTrigger","TabsContent","Label","Input","Button"],"mappings":"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"}